{
  "Architecture/": "Issues related to the overall structure and design of the software. For example, poor separation of concerns, tightly coupled components, or monolithic design.",
  "Architecture/Patterns/": "Issues related to the use and implementation of design patterns. For example, incorrect usage, incomplete implementation, or poor choice of pattern.",
  "Architecture/Patterns/Misuse": "Inappropriate use of design patterns or patterns used when not needed. For example, using Singleton when it is not required or using Factory Method when a simple constructor would suffice.",
  "Architecture/Patterns/BetterOption": "A more suitable design pattern exists for the given context. For example, using Observer instead of Polling or choosing Strategy over a series of if-else statements.",
  "Architecture/Patterns/WrongImplementation": "Incorrect implementation of a design pattern. For example, not properly implementing the Singleton pattern, causing multiple instances to be created.",
  "Architecture/ObjectOriented/": "Issues related to object-oriented design principles and practices. For example, poor use of inheritance, encapsulation, composition, delegation, abstraction, or polymorphism.",
  "Architecture/ObjectOriented/Inheritance": "Issues with inheritance, such as inappropriate or excessive use. For example, inheriting from multiple concrete classes or using inheritance when composition is more suitable.",
  "Architecture/ObjectOriented/Encapsulation": "Issues with encapsulation, such as exposing internal implementation details. For example, public member variables or exposing mutable objects directly.",
  "Architecture/ObjectOriented/Composition": "Issues with composition, such as improper use or missed opportunities. For example, not using composition when it would improve modularity or maintainability.",
  "Architecture/ObjectOriented/Delegation": "Issues with delegation, such as incorrect or missing delegation. For example, not delegating responsibilities to the appropriate class or object.",
  "Architecture/ObjectOriented/Abstraction": "Issues with abstraction, such as insufficient or inappropriate abstraction levels. For example, too many levels of abstraction, making the code hard to understand, or too few, causing tight coupling.",
  "Architecture/ObjectOriented/Polymorphism": "Issues with polymorphism, such as incorrect or inefficient use. For example, not utilizing polymorphism to simplify code or using it in a way that leads to code duplication.",
  "Architecture/ProtocolOriented": "Issues related to protocol-oriented design, such as not using protocols where they could improve flexibility or readability. For example, not leveraging protocol extensions or default implementations in Swift.",
  "Architecture/Cost": "Issues related to the cost of the architecture, such as increased development time, complexity, or maintainability due to architectural decisions. For example, over-engineering or using a microservices architecture without clear benefits.",
  "Architecture/OperationalEase": "Issues related to the ease of deploying, monitoring, and maintaining the software due to architectural decisions. For example, poor observability or difficulty in troubleshooting.",
  "Architecture/Scalability": "Issues related to the ability of the architecture to handle increased load, both horizontally and vertically. For example, single points of failure, inadequate caching, or poor data partitioning.",
  "Architecture/Functional": "Issues related to functional programming principles and practices. For example, not leveraging immutability, higher-order functions, or function composition where it could improve the code.",
  "Architecture/SOLID/": "Issues related to the SOLID principles of object-oriented design.",
}
